import{_ as s,c as a,o as e,O as n}from"./chunks/framework.9c3ff96d.js";const A=JSON.parse('{"title":"Events","description":"","frontmatter":{"title":"Events","lang":"en-US"},"headers":[],"relativePath":"template-api/events.md","filePath":"template-api/events.md","lastUpdated":1727354555000}'),o={name:"template-api/events.md"},t=n(`<h1 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h1><p>The <code>TemplateAPI</code> even contains a few methods to handle events.</p><h2 id="on-zoom" tabindex="-1">On Zoom <a class="header-anchor" href="#on-zoom" aria-label="Permalink to &quot;On Zoom&quot;">​</a></h2><p>The <code>OnZoom</code> method registers a callback function within the force simulation&#39;s <code>zoom event</code>. It fires when the given threshold is passed and applies the <a href="/template-api/styling.html#lod-style">level of detail styles</a> accordingly.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The threshold is internally tuned to match the relative scale between the global zoom factor and the schape&#39;s scale factor.</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">OnZoom</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.6</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">LODStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">LODStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is also possible to pass and array of thresholds to the <code>OnZoom</code> method to easily create multiple LOD steps.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">OnZoom</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0.6</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.8</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">LODStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">LODStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">LODStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>this feature is only available in verion 1.2.0 and above</p></div></div><h2 id="on-theme-change" tabindex="-1">On Theme Change <a class="header-anchor" href="#on-theme-change" aria-label="Permalink to &quot;On Theme Change&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">available since version 1.4.0</p></div><p>The <code>OnThemeChange</code> method registers a callback function within the force simulation&#39;s <code>theme:change</code> event. It fires when the theme changes and provides a hook for the template to react to the change if necessary.<br> The method takes the node <code>data</code> object and a callback function as parameters.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">OnThemeChange</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">theme</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// do something with the theme</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is a very powerful but generic method to react to theme changes. If you want to change shape styles based on the theme, you should take a look at the <a href="/template-api/styling.html#theme-style">ThemeStyle</a> method instead. This makes it more convenient to change things like text color on theme change.</p></div><h2 id="emit-event" tabindex="-1">Emit Event <a class="header-anchor" href="#emit-event" aria-label="Permalink to &quot;Emit Event&quot;">​</a></h2><p>The <code>EmitEvent</code> method emits an event with the given name and data. It can be listened to by the <code>ForceSimulation</code> <code>on()</code> method as described in the <a href="/simulation-api/event_api.html#custom-template-events">Event API</a>. It requires the events <code>identifier</code>, the node <code>data</code> object and the <code>event</code> data. Any further data can be added by the template author.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> d3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">select</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">EmitEvent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn-click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,15),l=[t];function p(c,r,i,y,D,h){return e(),a("div",null,l)}const C=s(o,[["render",p]]);export{A as __pageData,C as default};
