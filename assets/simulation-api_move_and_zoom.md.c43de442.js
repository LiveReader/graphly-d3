import{_ as s,o as a,c as n,a as o}from"./app.e5bb6d6c.js";const C=JSON.parse('{"title":"Move and Zoom","description":"","frontmatter":{"title":"Move and Zoom","lang":"en-US"},"headers":[{"level":2,"title":"Zoom Enabled","slug":"zoom-enabled","link":"#zoom-enabled","children":[]},{"level":2,"title":"Zoom Scale Extent","slug":"zoom-scale-extent","link":"#zoom-scale-extent","children":[]},{"level":2,"title":"World Transform","slug":"world-transform","link":"#world-transform","children":[]},{"level":2,"title":"World Bounds","slug":"world-bounds","link":"#world-bounds","children":[]},{"level":2,"title":"Move To","slug":"move-to","link":"#move-to","children":[]}],"relativePath":"simulation-api/move_and_zoom.md","lastUpdated":1678880844000}'),e={name:"simulation-api/move_and_zoom.md"},l=o(`<h1 id="move-and-zoom" tabindex="-1">Move and Zoom <a class="header-anchor" href="#move-and-zoom" aria-hidden="true">#</a></h1><p>The <code>ForceSimulation</code> class provides a number of interfaces to interact with the capability to zoom and pan the graph as well as to move to coordinates.</p><h2 id="zoom-enabled" tabindex="-1">Zoom Enabled <a class="header-anchor" href="#zoom-enabled" aria-hidden="true">#</a></h2><p>The <code>ForceSimulation</code> class has a public <code>zoomEnabled</code> member setter that can be set to <code>true</code> or <code>false</code>. This enables or disables the zooming functionality affecting panning, pinching and zooming.</p><p>By default, the zooming is enabled.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">simulation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zoomEnabled </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="zoom-scale-extent" tabindex="-1">Zoom Scale Extent <a class="header-anchor" href="#zoom-scale-extent" aria-hidden="true">#</a></h2><p>The <code>ForceSimulation</code> class has a public <code>zoomScaleExtent</code> member setter that can be set to an array of two numbers. They define the minimum and maximum zoom scale values a user can zoom in and out by pinching or zooming.</p><p><code>zoomScaleExtent</code> is set to <code>[0.1, 3]</code> by default.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">simulation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zoomScaleExtent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="world-transform" tabindex="-1">World Transform <a class="header-anchor" href="#world-transform" aria-hidden="true">#</a></h2><p>The <code>ForceSimulation</code> class has a public <code>transform</code> member that can holds the current transform of the svg world.</p><p><code>transform</code> is set to <code>{ k: 1, x: 0, y: 0 }</code> at the beginning.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> transform </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> simulation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">worldTransform</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="world-bounds" tabindex="-1">World Bounds <a class="header-anchor" href="#world-bounds" aria-hidden="true">#</a></h2><p>The <code>ForceSimulation</code> class has a public <code>worldBounds</code> getter that returns the current bounds that the svg element is showing. This depends on the worldTransform and the svg element dimensions.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bounds </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> simulation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">worldBounds</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="move-to" tabindex="-1">Move To <a class="header-anchor" href="#move-to" aria-hidden="true">#</a></h2><p>The <code>ForceSimulation</code> exposes a powerful <code>moveTo()</code> method that can be used to move the svg world to a specific coordinate or to display certain bounds. It takes an <code>MoveOptions</code> object as input.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MoveOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">transform</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Transform</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">boundaries</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Boundary</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">nodes</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Node</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">duration</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">padding</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>transform</code></td><td>If set the world will be moved to the given coordinates and scale. This position will be the center of the svg element.</td></tr><tr><td><code>boundaries</code></td><td>If set the world will be moved to ensure that all given boundaries are visible. This is combinable with the <code>nodes</code> parameter.</td></tr><tr><td><code>nodes</code></td><td>If set the world will be moved to ensure that all given nodes are visible. This is combinable with the <code>boundaries</code> parameter.</td></tr><tr><td><code>duration</code></td><td>The duration of the animation in milliseconds.</td></tr><tr><td><code>padding</code></td><td>The padding in pixels that will be added to the boundaries. (No effect if using <code>transform</code>)</td></tr></tbody></table><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">simulation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">moveTo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">k</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">duration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This method is not restricted by the <code>zoomScaleExtent</code> or <code>zoomEnabled</code> properties. If <code>transform</code> is set it is the most significant parameter and <code>boundaries</code> and <code>nodes</code> are ignored.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Here the <code>worldBounds</code> can be handy. If you add a node but it is not visible, you can use <code>moveTo</code> to expand the view to show everything currently visible plus the new node.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">newNode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">shape</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myShape</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">scale</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">simulation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(newNode)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">simulation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">moveTo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">boundaries</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [simulation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">worldBounds]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">nodes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [newNode]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></div>`,24),t=[l];function p(c,r,d,i,y,D){return a(),n("div",null,t)}const A=s(e,[["render",p]]);export{C as __pageData,A as default};
