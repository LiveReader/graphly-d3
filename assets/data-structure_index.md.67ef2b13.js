import{_ as e,o as t,c as s,a}from"./app.e5bb6d6c.js";const u=JSON.parse('{"title":"Data Structure","description":"","frontmatter":{"title":"Data Structure","lang":"en-US"},"headers":[{"level":2,"title":"Original Data Structure","slug":"original-data-structure","link":"#original-data-structure","children":[]},{"level":2,"title":"Runtime Additions","slug":"runtime-additions","link":"#runtime-additions","children":[]}],"relativePath":"data-structure/index.md","lastUpdated":1682979305000}'),o={name:"data-structure/index.md"},n=a(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h1><p>Graphly D3 utilizes the force simulation of d3 and builds on top of it to make shape templates possible. To enable those additional features, Graphly takes the data structure of the force simulation and adds a number of further data properties to it.</p><p>The data structure extensions are described in more detail on the following pages.</p><h2 id="original-data-structure" tabindex="-1">Original Data Structure <a class="header-anchor" href="#original-data-structure" aria-hidden="true">#</a></h2><p>The data required by the vanilla d3 force simulation is an array of <code>nodes</code> and an array of <code>links</code> with very rudimentary properties.</p><p>Each <code>node</code> object requires only an <code>id</code> property to identify it.<br> Each <code>link</code> object takes a <code>source</code> and <code>target</code> property to know the <code>ids</code> of the nodes it connects.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> graph </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">nodes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">links</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>D3 changes certain properties while processing the data.<br> E.g. a links <code>source</code> and <code>target</code> properties get changed from the <code>id</code> string to a reference to the respective node object.</p></div><h2 id="runtime-additions" tabindex="-1">Runtime Additions <a class="header-anchor" href="#runtime-additions" aria-hidden="true">#</a></h2><p>When the data is rendered to display a force-directed graph, the <code>node</code> objects are populated with additional properties. They represent the position and velocity of the node.</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>x</code></td><td>number</td><td>The x position of the node</td></tr><tr><td><code>y</code></td><td>number</td><td>The y position of the node</td></tr><tr><td><code>vx</code></td><td>number</td><td>The x velocity of the node</td></tr><tr><td><code>vy</code></td><td>number</td><td>The y velocity of the node</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Since the additional properties are now part of the data structure, they can be manipulated as well. This is especially useful when there is a need for custom behavior.</p></div>`,12),r=[n];function l(p,c,d,i,y,D){return t(),s("div",null,r)}const F=e(o,[["render",l]]);export{u as __pageData,F as default};
